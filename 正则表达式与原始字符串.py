
"""正则表达式与原始字符串"""

"""
    通常用原始字符串来表示正则表达式，因为在原始字符串中，包含哪些字符就表示哪些字符，而无需考虑转义字符。
"""
import re

# 在原始字符串r'\d'中，包含了一个反斜杠和一个d
# 在正则表达式中，用一个反斜杠和一个d匹配任意一个数字
print(re.match(r'\d', '8'))     # <re.Match object; span=(0, 1), match='8'>

"""
    如果不用原始字符串来表示正则表达式，而是用普通字符串来表示，则需要考虑转义字符。
"""
# 在普通字符串中，要用两个\\表示一个反斜杠
# 所以，'\\d'表示的是：一个反斜杠和一个d
# 在正则表达式中，用一个反斜杠和一个d匹配任意一个数字
print(re.match('\\d', '8'))     # <re.Match object; span=(0, 1), match='8'>

"""
    在正则表达式中，某些字符具有特殊含义，例如：\.^$?+*{}[]()|。如果想要使用这些字符的字面值，
必须使用反斜杠进行转义。
"""
# 被匹配的字符串'a\\b'是一个普通字符串
# 在普通字符串中，要用两个\\表示一个反斜杠
# 所以，'a\\b'表示的是：a、一个反斜杠、b
# 在正则表达式中，反斜杠是具有特殊含义的，如果要表示反斜杠的字面值，必须使用反斜杠进行转义
# 因此，原始字符串r'a\\b'表示的是：a、一个反斜杠、b
print(re.match(r'a\\b', 'a\\b'))    # <re.Match object; span=(0, 3), match='a\\b'>

# 如果用普通字符串表示上面的正则表达式
# 前两个\\表示一个反斜杠，后两个\\表示一个反斜杠
# 在正则表达式中，反斜杠是具有特殊含义的，如果要表示反斜杠的字面值，必须使用反斜杠进行转义
# 因此，前面两个\\表示的反斜杠，要对后面两个\\表示的反斜杠进行转义，从而表示一个反斜杠（反斜杠的字面值）
print(re.match('a\\\\b', 'a\\b'))   # <re.Match object; span=(0, 3), match='a\\b'>
