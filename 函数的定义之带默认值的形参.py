
"""函数的定义之带默认值的形参"""

"""
    定义函数时，可以给形参设置默认值，这样，调用函数时如果不传递对应的实参，就会使用设置的默认值
初始化形参。
    给形参设置默认值的语法格式为：形参 = 默认值。
    给形参设置默认值之后，可以简化函数的调用，只有与默认值不符的形参才需要传递额外的实参。
"""
def f1(a, b = 5):
    print('a =', a, 'b =', b)

f1(2, 6)     # a = 2 b = 6
f1(2)        # a = 2 b = 5


def f2(a, b = 5, c = 8):
    print('a =', a, 'b =', b, 'c =', c)

f2(2, 6, 9)      # a = 2 b = 6 c = 9
f2(2)            # a = 2 b = 5 c = 8
f2(2, 6)         # a = 2 b = 6 c = 8
f2(2, c = 9)     # a = 2 b = 5 c = 9

"""
    定义函数时，没有设置默认值的形参必须位于设置了默认值的形参之前。否则，
无法根据位置来匹配位置实参和对应的形参。
"""
# def f(b = 5, a): # non-default parameter follows default parameter
#    print('a =', a, 'b =', b)
# 假设上面的定义是合法的，对于调用f(2)，你可能想把实参2传递给形参a，但是实参2是位置实参，
# 因此，实参2会传递给形参b，从而导致形参a存在实参缺失。
"""
    当函数有多个形参时，把变化大的形参放在前面，把变化小的形参放在后面，变化小的形参
就可以设置默认值。
"""

"""
    给形参设置默认值之后，调用函数时就存在多种调用方式。
"""
def fun(a, b = 5):
    print('a =', a, 'b =', b)

fun(3)              # a = 3 b = 5
fun(a = 3)          # a = 3 b = 5
fun(3, 6)           # a = 3 b = 6
fun(a = 3, b = 6)   # a = 3 b = 6
fun(b = 6, a = 3)   # a = 3 b = 6
fun(3, b = 6)       # a = 3 b = 6

"""
    《图解Python》

    定义函数时，给形参设置的默认值就被计算出来了。因此，如果给形参设置的默认值是可变类型的对象，
并且前一次调用函数时在函数体内修改了形参的默认值，那么修改后的值将作为下一次调用函数时
形参的默认值。
"""
def fun1(L = []):
    L.append(18)
    print(L)

fun1()    # [18]
fun1()    # [18, 18]
fun1()    # [18, 18, 18]
"""
    不要把形参的默认值设置为可变类型的对象。
"""
def fun2(L = None):
    if L is None:
        L = []
    L.append(18)
    print(L)

fun2()  # [18]
fun2()  # [18]
fun2()  # [18]
