
"""列表的"查"操作之使用切片一次获得多个元素"""

"""
    可以使用切片获得列表中的元素，一次可以获得多个元素。
    切片的语法格式为：[start:stop:step]，其中，
1. 得到的切片仍然是列表，是原始列表的片段的一份拷贝。 
2. 得到的切片不包括索引stop对应的元素。
3. 如果不指定step，其默认值是1，此时语法格式可以简化为[start:stop]。
4. 当step为正数时，
      如果不指定start，切片的第一个元素默认是列表的第一个元素。
      如果不指定stop，切片的最后一个元素默认是列表的最后一个元素。
      从索引start开始往后计算切片。    
   当step为负数时，
      如果不指定start，切片的第一个元素默认是列表的最后一个元素。
      如果不指定stop，切片的最后一个元素默认是列表的第一个元素。 
      从索引start开始往前计算切片。  
"""
L = [5, 3, 9, 4, 0, 6, 8, 1, 7, 2]

print(L[1:7:2])     # [3, 4, 6]

print(L[1:7:])      # [3, 9, 4, 0, 6, 8]
print(L[1:7])       # [3, 9, 4, 0, 6, 8]

print(L[::])        # [5, 3, 9, 4, 0, 6, 8, 1, 7, 2]

print(L[::-1])      # [2, 7, 1, 8, 6, 0, 4, 9, 3, 5]
print(L[6:0:-2])    # [8, 0, 9]
print(L[0:6:-2])    # []
print(L[6::-2])     # [8, 0, 9, 5]
print(L[:5:-2])     # [2, 1]

"""
5. 切片操作是允许索引越界的
"""
print(L[:100])      # [5, 3, 9, 4, 0, 6, 8, 1, 7, 2]
print(L[-100:])     # [5, 3, 9, 4, 0, 6, 8, 1, 7, 2]

"""
6. 可以调用内置函数slice（类slice的构造方法）创建slice类型的对象
    内置函数slice有三种调用方式：
    1. slice(stop)
    2. slice(start, stop)
    3. slice(start, stop, step)
    start、stop和step的默认值都是None。
    slice(start, stop, step)与start:stop:step是等价的。
"""
L = [5, 3, 9, 4, 0, 6, 8, 1, 7, 2]

print(L[1:7:2])             # [3, 4, 6]
print(L[slice(1, 7, 2)])    # [3, 4, 6]

print(L[::])                        # [5, 3, 9, 4, 0, 6, 8, 1, 7, 2]
print(L[slice(None, None, None)])   # [5, 3, 9, 4, 0, 6, 8, 1, 7, 2]

print(L[1:7])               # [3, 9, 4, 0, 6, 8]
print(L[slice(1, 7)])       # [3, 9, 4, 0, 6, 8]
print(L[slice(1, 7, None)]) # [3, 9, 4, 0, 6, 8]

print(L[:7])                    # [5, 3, 9, 4, 0, 6, 8]
print(L[slice(7)])              # [5, 3, 9, 4, 0, 6, 8]
print(L[slice(None, 7, None)])  # [5, 3, 9, 4, 0, 6, 8]
