
"""进程和线程的概述"""

"""
    在Windows操作系统中打开任务管理器，或者在macOS操作系统中打开活动监视器，然后，
打开"QQ音乐"这个应用程序，就启动了一个名为"QQ音乐"的进程；
打开"Firefox"这个应用程序，就启动了一个名为"Firefox"的进程；
打开"Microsoft Word"这个应用程序，就启动了一个名为"Microsoft Word"的进程；
简单地说，进程就是运行中的应用程序。应用程序是静态的，而进程是动态的。
    
    查看所有正在运行的进程，每个进程至少对应一个线程。每个进程都用来完成一件任务，每个线程都用来
完成进程内的一件子任务。因此，在每个进程的内部，都可以同时完成多件子任务，比如：Microsoft Word，
它可以同时进行打字、拼写检查和打印。简单地说，线程就是进程内部的一个执行单元。

    每个进程都有独立的内存空间，而进程内的所有线程共享内存空间。
    《图解Python》
"""

"""
    查看所有正在运行的进程，有几十个甚至几百个，也就是说，操作系统可以同时运行几十个甚至几百个任务，
比如：我们可以一边听QQ音乐，一边用Firefox下载，一边用Microsoft Word写文章，这就是多任务。
    
    不管是单核CPU还是多核CPU，都支持多任务。先来看单核CPU是如何支持多任务的：
    《图解Python》
例如：CPU先执行QQ音乐0.02秒，然后切换到Firefox执行0.02秒，再切换到Microsoft Word执行0.02秒...
这样反复切换轮流交替执行。由于CPU的调度和执行速度实在太快了，导致我们感觉就像是多个任务都在同时执行一样。
这种多个任务交替执行的方式称为并发，而我们感觉到的多个任务同时执行的方式称为并行。
    如果想让多个任务真正并行（同时执行），只能在多核CPU上，并且任务数小于CPU的核数：
    《图解Python》
    目前，几乎所有的计算机都是多核CPU的，并且任务数通常远远大于CPU的核数，所以，操作系统也会自动
把很多任务轮流调度到每个核心上执行。

    既然进程和线程都可以用来完成任务，如果想要实现多任务，有三种方式：
1. 多进程（启动多个进程，每个进程内默认只有一个线程）
2. 多线程（启动一个进程，在进程内再启动多个线程）
3. 多进程+多线程（启动多个进程，在每个进程内再启动多个线程）
"""
